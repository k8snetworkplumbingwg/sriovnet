// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net"

	mock "github.com/stretchr/testify/mock"
	"github.com/vishvananda/netlink"
)

// NewMockNetlinkOps creates a new instance of MockNetlinkOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetlinkOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetlinkOps {
	mock := &MockNetlinkOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNetlinkOps is an autogenerated mock type for the NetlinkOps type
type MockNetlinkOps struct {
	mock.Mock
}

type MockNetlinkOps_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetlinkOps) EXPECT() *MockNetlinkOps_Expecter {
	return &MockNetlinkOps_Expecter{mock: &_m.Mock}
}

// DevLinkGetAllPortList provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) DevLinkGetAllPortList() ([]*netlink.DevlinkPort, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DevLinkGetAllPortList")
	}

	var r0 []*netlink.DevlinkPort
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*netlink.DevlinkPort, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*netlink.DevlinkPort); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*netlink.DevlinkPort)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNetlinkOps_DevLinkGetAllPortList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DevLinkGetAllPortList'
type MockNetlinkOps_DevLinkGetAllPortList_Call struct {
	*mock.Call
}

// DevLinkGetAllPortList is a helper method to define mock.On call
func (_e *MockNetlinkOps_Expecter) DevLinkGetAllPortList() *MockNetlinkOps_DevLinkGetAllPortList_Call {
	return &MockNetlinkOps_DevLinkGetAllPortList_Call{Call: _e.mock.On("DevLinkGetAllPortList")}
}

func (_c *MockNetlinkOps_DevLinkGetAllPortList_Call) Run(run func()) *MockNetlinkOps_DevLinkGetAllPortList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetlinkOps_DevLinkGetAllPortList_Call) Return(devlinkPorts []*netlink.DevlinkPort, err error) *MockNetlinkOps_DevLinkGetAllPortList_Call {
	_c.Call.Return(devlinkPorts, err)
	return _c
}

func (_c *MockNetlinkOps_DevLinkGetAllPortList_Call) RunAndReturn(run func() ([]*netlink.DevlinkPort, error)) *MockNetlinkOps_DevLinkGetAllPortList_Call {
	_c.Call.Return(run)
	return _c
}

// DevLinkGetDevicePortList provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) DevLinkGetDevicePortList(busName string, deviceName string) ([]*netlink.DevlinkPort, error) {
	ret := _mock.Called(busName, deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DevLinkGetDevicePortList")
	}

	var r0 []*netlink.DevlinkPort
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]*netlink.DevlinkPort, error)); ok {
		return returnFunc(busName, deviceName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []*netlink.DevlinkPort); ok {
		r0 = returnFunc(busName, deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*netlink.DevlinkPort)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(busName, deviceName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNetlinkOps_DevLinkGetDevicePortList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DevLinkGetDevicePortList'
type MockNetlinkOps_DevLinkGetDevicePortList_Call struct {
	*mock.Call
}

// DevLinkGetDevicePortList is a helper method to define mock.On call
//   - busName string
//   - deviceName string
func (_e *MockNetlinkOps_Expecter) DevLinkGetDevicePortList(busName interface{}, deviceName interface{}) *MockNetlinkOps_DevLinkGetDevicePortList_Call {
	return &MockNetlinkOps_DevLinkGetDevicePortList_Call{Call: _e.mock.On("DevLinkGetDevicePortList", busName, deviceName)}
}

func (_c *MockNetlinkOps_DevLinkGetDevicePortList_Call) Run(run func(busName string, deviceName string)) *MockNetlinkOps_DevLinkGetDevicePortList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_DevLinkGetDevicePortList_Call) Return(devlinkPorts []*netlink.DevlinkPort, err error) *MockNetlinkOps_DevLinkGetDevicePortList_Call {
	_c.Call.Return(devlinkPorts, err)
	return _c
}

func (_c *MockNetlinkOps_DevLinkGetDevicePortList_Call) RunAndReturn(run func(busName string, deviceName string) ([]*netlink.DevlinkPort, error)) *MockNetlinkOps_DevLinkGetDevicePortList_Call {
	_c.Call.Return(run)
	return _c
}

// DevLinkGetPortByNetdevName provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) DevLinkGetPortByNetdevName(netdev string) (*netlink.DevlinkPort, error) {
	ret := _mock.Called(netdev)

	if len(ret) == 0 {
		panic("no return value specified for DevLinkGetPortByNetdevName")
	}

	var r0 *netlink.DevlinkPort
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*netlink.DevlinkPort, error)); ok {
		return returnFunc(netdev)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *netlink.DevlinkPort); ok {
		r0 = returnFunc(netdev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netlink.DevlinkPort)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(netdev)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNetlinkOps_DevLinkGetPortByNetdevName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DevLinkGetPortByNetdevName'
type MockNetlinkOps_DevLinkGetPortByNetdevName_Call struct {
	*mock.Call
}

// DevLinkGetPortByNetdevName is a helper method to define mock.On call
//   - netdev string
func (_e *MockNetlinkOps_Expecter) DevLinkGetPortByNetdevName(netdev interface{}) *MockNetlinkOps_DevLinkGetPortByNetdevName_Call {
	return &MockNetlinkOps_DevLinkGetPortByNetdevName_Call{Call: _e.mock.On("DevLinkGetPortByNetdevName", netdev)}
}

func (_c *MockNetlinkOps_DevLinkGetPortByNetdevName_Call) Run(run func(netdev string)) *MockNetlinkOps_DevLinkGetPortByNetdevName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_DevLinkGetPortByNetdevName_Call) Return(devlinkPort *netlink.DevlinkPort, err error) *MockNetlinkOps_DevLinkGetPortByNetdevName_Call {
	_c.Call.Return(devlinkPort, err)
	return _c
}

func (_c *MockNetlinkOps_DevLinkGetPortByNetdevName_Call) RunAndReturn(run func(netdev string) (*netlink.DevlinkPort, error)) *MockNetlinkOps_DevLinkGetPortByNetdevName_Call {
	_c.Call.Return(run)
	return _c
}

// LinkByName provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkByName(name string) (netlink.Link, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for LinkByName")
	}

	var r0 netlink.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (netlink.Link, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNetlinkOps_LinkByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkByName'
type MockNetlinkOps_LinkByName_Call struct {
	*mock.Call
}

// LinkByName is a helper method to define mock.On call
//   - name string
func (_e *MockNetlinkOps_Expecter) LinkByName(name interface{}) *MockNetlinkOps_LinkByName_Call {
	return &MockNetlinkOps_LinkByName_Call{Call: _e.mock.On("LinkByName", name)}
}

func (_c *MockNetlinkOps_LinkByName_Call) Run(run func(name string)) *MockNetlinkOps_LinkByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkByName_Call) Return(link netlink.Link, err error) *MockNetlinkOps_LinkByName_Call {
	_c.Call.Return(link, err)
	return _c
}

func (_c *MockNetlinkOps_LinkByName_Call) RunAndReturn(run func(name string) (netlink.Link, error)) *MockNetlinkOps_LinkByName_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetUp provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkSetUp(link netlink.Link) error {
	ret := _mock.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetUp")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = returnFunc(link)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkOps_LinkSetUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetUp'
type MockNetlinkOps_LinkSetUp_Call struct {
	*mock.Call
}

// LinkSetUp is a helper method to define mock.On call
//   - link netlink.Link
func (_e *MockNetlinkOps_Expecter) LinkSetUp(link interface{}) *MockNetlinkOps_LinkSetUp_Call {
	return &MockNetlinkOps_LinkSetUp_Call{Call: _e.mock.On("LinkSetUp", link)}
}

func (_c *MockNetlinkOps_LinkSetUp_Call) Run(run func(link netlink.Link)) *MockNetlinkOps_LinkSetUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 netlink.Link
		if args[0] != nil {
			arg0 = args[0].(netlink.Link)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkSetUp_Call) Return(err error) *MockNetlinkOps_LinkSetUp_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkOps_LinkSetUp_Call) RunAndReturn(run func(link netlink.Link) error) *MockNetlinkOps_LinkSetUp_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetVfHardwareAddr provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkSetVfHardwareAddr(link netlink.Link, vf int, hwaddr net.HardwareAddr) error {
	ret := _mock.Called(link, vf, hwaddr)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetVfHardwareAddr")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link, int, net.HardwareAddr) error); ok {
		r0 = returnFunc(link, vf, hwaddr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkOps_LinkSetVfHardwareAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetVfHardwareAddr'
type MockNetlinkOps_LinkSetVfHardwareAddr_Call struct {
	*mock.Call
}

// LinkSetVfHardwareAddr is a helper method to define mock.On call
//   - link netlink.Link
//   - vf int
//   - hwaddr net.HardwareAddr
func (_e *MockNetlinkOps_Expecter) LinkSetVfHardwareAddr(link interface{}, vf interface{}, hwaddr interface{}) *MockNetlinkOps_LinkSetVfHardwareAddr_Call {
	return &MockNetlinkOps_LinkSetVfHardwareAddr_Call{Call: _e.mock.On("LinkSetVfHardwareAddr", link, vf, hwaddr)}
}

func (_c *MockNetlinkOps_LinkSetVfHardwareAddr_Call) Run(run func(link netlink.Link, vf int, hwaddr net.HardwareAddr)) *MockNetlinkOps_LinkSetVfHardwareAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 netlink.Link
		if args[0] != nil {
			arg0 = args[0].(netlink.Link)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 net.HardwareAddr
		if args[2] != nil {
			arg2 = args[2].(net.HardwareAddr)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfHardwareAddr_Call) Return(err error) *MockNetlinkOps_LinkSetVfHardwareAddr_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfHardwareAddr_Call) RunAndReturn(run func(link netlink.Link, vf int, hwaddr net.HardwareAddr) error) *MockNetlinkOps_LinkSetVfHardwareAddr_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetVfNodeGUID provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkSetVfNodeGUID(link netlink.Link, vf int, nodeguid net.HardwareAddr) error {
	ret := _mock.Called(link, vf, nodeguid)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetVfNodeGUID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link, int, net.HardwareAddr) error); ok {
		r0 = returnFunc(link, vf, nodeguid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkOps_LinkSetVfNodeGUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetVfNodeGUID'
type MockNetlinkOps_LinkSetVfNodeGUID_Call struct {
	*mock.Call
}

// LinkSetVfNodeGUID is a helper method to define mock.On call
//   - link netlink.Link
//   - vf int
//   - nodeguid net.HardwareAddr
func (_e *MockNetlinkOps_Expecter) LinkSetVfNodeGUID(link interface{}, vf interface{}, nodeguid interface{}) *MockNetlinkOps_LinkSetVfNodeGUID_Call {
	return &MockNetlinkOps_LinkSetVfNodeGUID_Call{Call: _e.mock.On("LinkSetVfNodeGUID", link, vf, nodeguid)}
}

func (_c *MockNetlinkOps_LinkSetVfNodeGUID_Call) Run(run func(link netlink.Link, vf int, nodeguid net.HardwareAddr)) *MockNetlinkOps_LinkSetVfNodeGUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 netlink.Link
		if args[0] != nil {
			arg0 = args[0].(netlink.Link)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 net.HardwareAddr
		if args[2] != nil {
			arg2 = args[2].(net.HardwareAddr)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfNodeGUID_Call) Return(err error) *MockNetlinkOps_LinkSetVfNodeGUID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfNodeGUID_Call) RunAndReturn(run func(link netlink.Link, vf int, nodeguid net.HardwareAddr) error) *MockNetlinkOps_LinkSetVfNodeGUID_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetVfPortGUID provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkSetVfPortGUID(link netlink.Link, vf int, portguid net.HardwareAddr) error {
	ret := _mock.Called(link, vf, portguid)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetVfPortGUID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link, int, net.HardwareAddr) error); ok {
		r0 = returnFunc(link, vf, portguid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkOps_LinkSetVfPortGUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetVfPortGUID'
type MockNetlinkOps_LinkSetVfPortGUID_Call struct {
	*mock.Call
}

// LinkSetVfPortGUID is a helper method to define mock.On call
//   - link netlink.Link
//   - vf int
//   - portguid net.HardwareAddr
func (_e *MockNetlinkOps_Expecter) LinkSetVfPortGUID(link interface{}, vf interface{}, portguid interface{}) *MockNetlinkOps_LinkSetVfPortGUID_Call {
	return &MockNetlinkOps_LinkSetVfPortGUID_Call{Call: _e.mock.On("LinkSetVfPortGUID", link, vf, portguid)}
}

func (_c *MockNetlinkOps_LinkSetVfPortGUID_Call) Run(run func(link netlink.Link, vf int, portguid net.HardwareAddr)) *MockNetlinkOps_LinkSetVfPortGUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 netlink.Link
		if args[0] != nil {
			arg0 = args[0].(netlink.Link)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 net.HardwareAddr
		if args[2] != nil {
			arg2 = args[2].(net.HardwareAddr)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfPortGUID_Call) Return(err error) *MockNetlinkOps_LinkSetVfPortGUID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfPortGUID_Call) RunAndReturn(run func(link netlink.Link, vf int, portguid net.HardwareAddr) error) *MockNetlinkOps_LinkSetVfPortGUID_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetVfSpoofchk provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkSetVfSpoofchk(link netlink.Link, vf int, check bool) error {
	ret := _mock.Called(link, vf, check)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetVfSpoofchk")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link, int, bool) error); ok {
		r0 = returnFunc(link, vf, check)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkOps_LinkSetVfSpoofchk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetVfSpoofchk'
type MockNetlinkOps_LinkSetVfSpoofchk_Call struct {
	*mock.Call
}

// LinkSetVfSpoofchk is a helper method to define mock.On call
//   - link netlink.Link
//   - vf int
//   - check bool
func (_e *MockNetlinkOps_Expecter) LinkSetVfSpoofchk(link interface{}, vf interface{}, check interface{}) *MockNetlinkOps_LinkSetVfSpoofchk_Call {
	return &MockNetlinkOps_LinkSetVfSpoofchk_Call{Call: _e.mock.On("LinkSetVfSpoofchk", link, vf, check)}
}

func (_c *MockNetlinkOps_LinkSetVfSpoofchk_Call) Run(run func(link netlink.Link, vf int, check bool)) *MockNetlinkOps_LinkSetVfSpoofchk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 netlink.Link
		if args[0] != nil {
			arg0 = args[0].(netlink.Link)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfSpoofchk_Call) Return(err error) *MockNetlinkOps_LinkSetVfSpoofchk_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfSpoofchk_Call) RunAndReturn(run func(link netlink.Link, vf int, check bool) error) *MockNetlinkOps_LinkSetVfSpoofchk_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetVfTrust provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkSetVfTrust(link netlink.Link, vf int, state bool) error {
	ret := _mock.Called(link, vf, state)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetVfTrust")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link, int, bool) error); ok {
		r0 = returnFunc(link, vf, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkOps_LinkSetVfTrust_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetVfTrust'
type MockNetlinkOps_LinkSetVfTrust_Call struct {
	*mock.Call
}

// LinkSetVfTrust is a helper method to define mock.On call
//   - link netlink.Link
//   - vf int
//   - state bool
func (_e *MockNetlinkOps_Expecter) LinkSetVfTrust(link interface{}, vf interface{}, state interface{}) *MockNetlinkOps_LinkSetVfTrust_Call {
	return &MockNetlinkOps_LinkSetVfTrust_Call{Call: _e.mock.On("LinkSetVfTrust", link, vf, state)}
}

func (_c *MockNetlinkOps_LinkSetVfTrust_Call) Run(run func(link netlink.Link, vf int, state bool)) *MockNetlinkOps_LinkSetVfTrust_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 netlink.Link
		if args[0] != nil {
			arg0 = args[0].(netlink.Link)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfTrust_Call) Return(err error) *MockNetlinkOps_LinkSetVfTrust_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfTrust_Call) RunAndReturn(run func(link netlink.Link, vf int, state bool) error) *MockNetlinkOps_LinkSetVfTrust_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetVfVlan provides a mock function for the type MockNetlinkOps
func (_mock *MockNetlinkOps) LinkSetVfVlan(link netlink.Link, vf int, vlan int) error {
	ret := _mock.Called(link, vf, vlan)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetVfVlan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link, int, int) error); ok {
		r0 = returnFunc(link, vf, vlan)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkOps_LinkSetVfVlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetVfVlan'
type MockNetlinkOps_LinkSetVfVlan_Call struct {
	*mock.Call
}

// LinkSetVfVlan is a helper method to define mock.On call
//   - link netlink.Link
//   - vf int
//   - vlan int
func (_e *MockNetlinkOps_Expecter) LinkSetVfVlan(link interface{}, vf interface{}, vlan interface{}) *MockNetlinkOps_LinkSetVfVlan_Call {
	return &MockNetlinkOps_LinkSetVfVlan_Call{Call: _e.mock.On("LinkSetVfVlan", link, vf, vlan)}
}

func (_c *MockNetlinkOps_LinkSetVfVlan_Call) Run(run func(link netlink.Link, vf int, vlan int)) *MockNetlinkOps_LinkSetVfVlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 netlink.Link
		if args[0] != nil {
			arg0 = args[0].(netlink.Link)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfVlan_Call) Return(err error) *MockNetlinkOps_LinkSetVfVlan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkOps_LinkSetVfVlan_Call) RunAndReturn(run func(link netlink.Link, vf int, vlan int) error) *MockNetlinkOps_LinkSetVfVlan_Call {
	_c.Call.Return(run)
	return _c
}
